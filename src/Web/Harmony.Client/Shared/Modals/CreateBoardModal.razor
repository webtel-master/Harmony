@using Harmony.Domain.Enums;
@inject Microsoft.Extensions.Localization.IStringLocalizer<CreateBoardModal> _localizer

<EditForm Model="@_createBoardModel" OnValidSubmit="SubmitAsync">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            @{
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.Dashboard" Class="mr-3 mb-n1" />
                    @_localizer["Create project"]
                </MudText>
            }
        </TitleContent>
        <DialogContent>
            <MudStack Spacing="4">
                <MudStack Row="true">
                    <MudTextField For="@(() => _createBoardModel.Title)" 
                        @bind-Value:get="_createBoardModel.Title" @bind-Value:set="SetTitle" Label="@_localizer["Title"]" />
                    <MudTextField For="@(() => _createBoardModel.Description)" @bind-Value="_createBoardModel.Description" Label="@_localizer["Description"]" />
                </MudStack>
                <MudStack Row="true">
                    <MudSelect T="BoardType" @bind-Value="@_createBoardModel.BoardType"
                               Label="Type" AnchorOrigin="Origin.BottomCenter"
                               Variant="Variant.Outlined" Clearable>
                        @foreach (var type in Enum.GetValues<BoardType>())
                        {
                            <MudSelectItem Disabled="Type.HasValue && type != Type" Value="type">@type.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect T="BoardVisibility" @bind-Value="@_createBoardModel.Visibility"
                               Label="Visibility" AnchorOrigin="Origin.BottomCenter"
                               Variant="Variant.Outlined" Clearable>
                        @foreach (var visibility in Enum.GetValues<BoardVisibility>())
                        {
                            <MudSelectItem Value="visibility">@visibility.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
                <MudStack Row="true">
                    <MudSelect T="string" @bind-Value="@_createBoardModel.WorkspaceId"
                               Label="Select workspace" AnchorOrigin="Origin.BottomCenter"
                               Variant="Variant.Outlined" Clearable>
                        @foreach (var workspace in _ownedWorkspaces)
                        {
                            <MudSelectItem Value="workspace.Id.ToString()"
                                           Disabled="FilterWorkspaceId.HasValue && workspace.Id != FilterWorkspaceId.Value">@workspace.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField For="@(() => _createBoardModel.Key)" @bind-Value="_createBoardModel.Key" Label="@_localizer["Key"]" />
                </MudStack>

            </MudStack>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Cancel">@_localizer["Cancel"]</MudButton>
                <MudButton Disabled="@(!context.IsModified() || !context.Validate() || _processing)"
                           ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                    @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@_localizer["Processing"]</MudText>
                }
                else
                {
                    <MudText>@_localizer["Create"]</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>