@using Harmony.Application.DTO.Automation
@using Harmony.Application.Features.Lists.Queries.GetBoardLists
@if (_loaded)
{
    @if (_automations.Any())
    {
        <div class="mb-4">
            <MudSelect T="SyncParentAndChildIssuesAutomationDto"
                       @bind-Value:get="_selectedAutomationModel"
                       @bind-Value:set="SelectAutomationBoardLists"
                       Label="Automations" ToStringFunc="syncParentChildConverter"
                       AnchorOrigin="Origin.BottomCenter">
                @foreach (var automation in _automations)
                {

                    <MudSelectItem Value="automation">
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" />
                            <MudText>@automation.Name</MudText>
                            </MudStack>
                        </MudSelectItem>
                }

                <MudSelectItem Value="_newAutomationModel">
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                        <MudText>Create new..</MudText>
                    </MudStack>
                </MudSelectItem>


            </MudSelect>
        </div>
    }

    <EditForm Model="@_selectedAutomationModel" OnValidSubmit="SubmitAsync">
        <DataAnnotationsValidator />
        <MudPaper Class="pa-4">
            <MudStack Spacing="4">
                <MudTextField For="@(() => _selectedAutomationModel.Name)"
                              @bind-Value="_selectedAutomationModel.Name" Label="Name" />
                <MudTextField Disabled="true" Lines="3" For="@(() => _selectedAutomationModel.Description)"
                              @bind-Value="_selectedAutomationModel.Description"
                              Label="Description" />
                <MudSelect @bind-Value="_fromStatusBoardList"
                           @bind-SelectedValues:get="_fromStatusBoardLists"
                           @bind-SelectedValues:set="SetFromStatusBoardLists"
                           MultiSelection="true"
                           ToStringFunc="@converter" Clearable="true"
                           T="GetBoardListResponse" Label="From status"
                           Placeholder="Leave blank to match all statuses.."
                           AnchorOrigin="Origin.BottomCenter">
                    @foreach (var list in _boardLists)
                    {
                        <MudSelectItem Value="list">@list.Title</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect @bind-Value="_toStatusBoardList"
                           @bind-SelectedValues:get="_toStatusBoardLists"
                           @bind-SelectedValues:set="SetToStatusBoardLists"
                           MultiSelection="true"
                           ToStringFunc="@converter" Clearable="true"
                           Placeholder="Leave blank to match all statuses.."
                           T="GetBoardListResponse" Label="To status" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var list in _boardLists)
                    {
                        <MudSelectItem Value="list">@list.Title</MudSelectItem>
                    }
                </MudSelect>

                @if (string.IsNullOrEmpty(_selectedAutomationModel.Id))
                {
                    <MudButton Disabled="@(!context.IsModified() || !context.Validate() || _creating)"
                               ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                        @if (_creating)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Enable</MudText>
                        }
                    </MudButton>
                }
                else
                {
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudButton Disabled="@(!context.Validate() || _creating || _updating || _toggling || _removing)"
                                       FullWidth="true"
                                       ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                                @if (_updating)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                                }
                                else
                                {
                                    <MudText>UPDATE</MudText>
                                }
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudButton Disabled="@(_creating || _updating || _toggling || _removing)" OnClick="ToggleStatus" FullWidth="true"
                                       Variant="Variant.Filled" Color="@(_selectedAutomationModel.Enabled ? Color.Default : Color.Default)">
                                @if (_toggling)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                                }
                                else
                                {
                                    <MudText>@(_selectedAutomationModel.Enabled ? "DISABLE" : "ENABLE")</MudText>
                                }
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton Disabled="@(_creating || _updating || _removing)" FullWidth="true"
                                       Variant="Variant.Filled" Color="Color.Error" OnClick="Remove">
                                @if (_removing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                                }
                                else
                                {
                                    <MudText>REMOVE</MudText>
                                }
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                }
            </MudStack>
        </MudPaper>
    </EditForm>
}